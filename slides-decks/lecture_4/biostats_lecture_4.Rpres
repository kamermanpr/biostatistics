Lecture 4
=========
css: ../custom.css
transition: none
width: 960
height: 720
autosize: false

```{r library_loads, include = FALSE}
library(dplyr)
library(tidyr)
library(readr)
library(ggplot2)
library(grid)
library(scales)
library(svglite)

data("airquality")
data("mtcars")

knitr::opts_chunk$set(echo = FALSE,
               warning = FALSE,
               message = FALSE,
               fig.path = './resources/',
               dev = 'svg')
```

## A (very brief) introduction to data presentation:

- Style guide for presenting data in text, tables, and figures
- Base R graphics
- The grammer of graphics and ggplot2

<div style="position:fixed;bottom:10%">
    <h3 style="margin:0;">
        Introduction to Biostatistics
    </h3>
    <p style="font-style:italic;font-size:80%;margin-top:1%;margin-bottom:1%;">
        By: Peter Kamerman &nbsp&nbsp (view at
        <a href="//painblogr.org/biostatistics/" target="_blank">painblogR</a>)
    </p>
    <img src="./resources/cc-by.png" width="128" style="margin:0;"/>
</div>

Base graphics
=============
title: hide
type: aside

Reporting data in text

Significant figures
===================

**Accuracy vs Precision**

<img class="center" style="height:500px;margin-top:40px" src="./resources/precision_accuracy.svg">

<div class="footer" style="font-size:80%">
     Mr Evans' Science Website:
     <a href="//sites.google.com/a/apaches.k12.in.us/mr-evans-science-website/accuracy-vs-precision">Accuracy vs Precision</a>
</div>

Significant figures
===================
class: vcenter

**Rules:**

- The level of precision (number of significant figures) is determined by the precision of the instrument used.

- The level of precision reported is determined by what level of precision conveys useful information to the reader.


Significant figures
===================
class: vcenter

### Reporting calculated values

**Rules:**

- The accuracy of the final calculated value is limited by the least accurate measurement in the calculation.

    _NB: Never round-off intermediate values in a calculation_


Significant figures
===================
type: twocol

**Example**

Participants' ages recorded to the nearest year

```{r age_table, results = 'asis'}
mean <- mean(c(24, 32, 29, 18, 25, 31, 24))
mean_round <- round(mean)

age_table <- data.frame(ID = c('P01', 'P02', 'P03',
                               'P04', 'P05', 'P06', 'P07'),
                        Age = c(24, 32, 29,
                                18, 25, 31, 24))
kable(age_table,
      digits = 0,
      col.names = c('Participant ID', 'Age (years)'))
```

****
<p style="padding-bottom:50%;"> </p>

$\bar{x}$ _(calculated):_ **`r round(mean, 5)`** years

$\bar{x}$ _(reported):_ **`r mean_round`** years

Reporting statistics *
====================
type: twocol

<div class="footer" style="font-size:80%">
    * Principles apply to <em>non-parametric</em><br> statistics too.
</div>

### _p_-values
- Report exact _p_-values to 2 or 3 decimal places.
- Never report _p_ > 0.05 as **NS**

Examples: <br>
_p_ = 0.41 (large p-value) <br>
_p_ = 0.021 (small p-value) <br>
_p_ < 0.001 (very small p-value)

****

### ANOVA _(F)_
- Report test statistic to 2 decimal places
- Always report with:
    1. degrees of freedom
    2. _p_-value
- For two-way ANOVA, report _F_-values for all **main effects** and **interaction** terms.

Example: <br>
_F_(2, 27) = 8.66, _p_ = 0.009

Reporting statistics *
====================
type: twocol

<div class="footer" style="font-size:80%">
    * Principles apply to <em>non-parametric</em> statistics too.
</div>

### t-test _(t)_
- Report test statistic to 2 decimal places
- Always report with:
    1. degrees of freedom
    2. _p_-value

Example: <br>
_t_(33) = 2.10, _p_ = 0.034

****

### Chi-squared $(\chi^2)$
- Report test statistic to 2 decimal places
- Always report with:
    1. degrees of freedom **and** sample size
    2. _p_-value

Example: <br>
$\chi^2$(2, n = 170) = 14.14, _p_ = 0.01

Reporting statistics *
====================
type: twocol

<div class="footer" style="font-size:80%">
    * Principles apply to <em>non-parametric</em> statistics too.
</div>

### Regression coefficients
- Report coefficient to 2 decimal places.
- Always report with:
    1. test statistic with degrees of freedom
    2. _p_-value

Example: <br>
$\beta$ = -0.34, _t_(225) = 6.53, _p_ < 0.001

****

### Regression R-squared
- Report _R^2_ to 2 decimal places
- Always report with:
    1. test statistic with degrees of freedom
    2. _p_-value

Example: <br>
_R^2_ = 0.12, _F_(1, 225) = 42.64, _p_ < 0.001

General reporting
=================
class: vcenter

- Never use a comma to split large numbers.<br>
    _(e.g., 1000000 **not** 1,000,000)_

- Do not use a comma instead of decimal point.<br>
    _(e.g., 2.3 **not** 2,3)_

- Always indicate how summative values are presented.<br>
    _(e.g., mean and standard deviation, or mean and 95% confidence interval)_

General reporting
=================
class: vcenter

- Report mean and standard deviation in the	form:<br>
    _37.2 $\unicode{x2103}$ (SD 2.1) or 37.2 $\unicode{x2103}$ (2.1), **not** 37.2 $\unicode{x2103}$ ($\pm$ 2.1)_

- Report confidence intervals as:<br>
    _12.3 to 32.5 or [+12.3, +32.5], **not** 12.3-32.5_

- Always use SI units, unless there is a historical convention.<br>
    _(e.g., mmHg for blood pressure)_



General reporting
=================
class: vcenter

- Report mean and standard deviation in the	form:<br>
    _37.2 $\unicode{x2103}$ (SD 2.1) or 37.2 $\unicode{x2103}$ (2.1), **not** 37.2 $\unicode{x2103}$ ($\pm$ 2.1)_

- Report confidence intervals as:<br>
    _12.3 to 32.5 or [+12.3, +32.5], **not** 12.3-32.5_

- Always use SI units, unless there is a historical convention.<br>
    _(e.g., mmHg for blood pressure)_

Scientific notation
===================
class: vcenter

**Solidus notation vs Index notation**

Example:

$VO_{2~max}~=~~~~ml~/~min.kg$ (solidus notation)

$~~~~~~~~~~~~~=~~~~ml.min^{-1}.kg^{-1}$ (index notation)

$~~~~~~~~~~~~~=~~~~ml~/~min~/~kg$ (never use two _'/'_ marks in a unit)

Tables
======
title: hide
type: aside

Reporting data in tables

Tables
======

**Use a table when:**

- The dataset contains relatively few numbers.
    - It is hard a reader to assimilate and interpret many tabulated numbers
    - In presentations the maximum size should be limited to: 3 x 3

- The precise value is crucial to your argument and a graph would not convey the same level of precision.
    - For example, when it is important that the reader knows that the result was -150.352 $^{\circ}C$ and not -150.4 $^{\circ}C$

Table design
============
class: vcenter

- Give an informative title (and number sequentially);

- Arrange data you want to compare down columns;

- Ensure row names and column headings are short, but informative, and include units of measurement, type of error value, and sample size;

- Pay attention to significant figures, and align numbers down columns;

Table design
============
class: vcenter

**...contd**

- Do not use vertical lines;

- Use minimal horizontal lines;

- Use footnotes to explain abbreviations and to provide additional context.

Example
=======
class: center

<div class="basic">
    <h3>Bad table</h3>

    <table>
        <tr>
            <th rowspan="2">Variable</th>
            <th colspan="4">Group</th>
        </tr>
        <tr>
            <td>Control</td>
            <td>Test</td>
            <td>Control</td>
            <td>Test</td>
        </tr>
        <tr>
            <td>Light</td>
            <td>12</td>
            <td>12</td>
            <td>16</td>
            <td>16</td>
        </tr>
        <tr>
            <td>5 days</td>
            <td>70.3</td>
            <td>60.4</td>
            <td>75</td>
            <td>52.4</td>
        </tr>
        <tr>
            <td>10 days</td>
            <td>90</td>
            <td>78</td>
            <td>100</td>
            <td>81</td>
        </tr>
    </table>
</div>

Example
=======
class: center

<div class="betterbasic">
    <h3>Good table</h3>

    <table>
      <caption style="font-size:110%;font-weight:bold;text-align:left;">Table 1. Exposure to high soil salinity reduces wheat growth </caption>
      <tr style="border-top: 1px solid #000000;">
        <th rowspan="2">Group<sup>&dagger;</sup></th>
        <th rowspan="2">Light exposure<br>(hours/day)</th>
        <th colspan="2" style="text-align: center;">
            Height of plant (mm)<br>[mean (SD)]</th>
      </tr>
      <tr style="border-top: 1px solid #000000;">
        <td style="font-weight: bold;">5 days after germination</td>
        <td style="font-weight: bold;">10 days after germination</td>
      </tr>
      <tr style="border-top: 1px solid #000000;">
        <td>Control</td>
        <td>12</td>
        <td>70.3 (13.2)</td>
        <td>90.3 (15.1)</td>
      </tr>
      <tr>
        <td>Saline</td>
        <td>12</td>
        <td>60.4 (5.1)*</td>
        <td>78.3 (13.5)*</td>
      </tr>
      <tr>
        <td>Control</td>
        <td>16</td>
        <td>75.0 (9.4)</td>
        <td>100.5 (6.4)</td>
      </tr>
      <tr style="border-bottom: 1px solid #000000;">
        <td>Saline</td>
        <td>16</td>
        <td>52.4 (7.9)*</td>
        <td>81.3 (12.2)*</td>
      </tr>
      <tfoot style="font-size:70%;line-height:120%;">
        <tr>
            <td colspan="4">* p < 0.05: corrected p-value for the comparison of saline vs control at a given light expsoure and growth duration. </td>
        </tr>
        <tr>
            <td colspan="4">&dagger; Salinity measured as total amount of soluble salts in the soil, expressed in parts per million (Control soil < 13 ppm; Saline soil > 15 ppm).</td>
        </tr>
      </tfoot>
    </table>
</div>

Plots
=====
title: hide
type: aside

Reporting data in plots

Data visualization
==================

<div class="center", style="width:80%;">
    <p style="font-size:150%;font-style:italic;text-align:center;">
    "The greatest value of a picture is when it forces us to notice what we never expected to see."
    </p>
    <p style="text-align:center">
     John Tukey<br>
        <span style="font-style:italic;font-size:80%;">(Amongst many other things, developer of the boxplot)</span>
    </p>
</div>

Plots design
============

**Plots should:**

- Tell a story..._so choose a plot type that complements the data._

- Be clear and uncluttered
    - Watch out for:
        - over-crowding of axes
        - plotting too many things on one plot (try faceting)
        - unclear axis titles and absence of measurement units
        - distorted axes (e.g., truncated)
        - inappropriate use of colour (5-10% of people with Y chromosomes are colourblind)

Plots design
============

**...contd**

- In other words, plots must have:
    - Clearly labeled axis titles
    - Appropriate axis ranges, labeled at appropriate intervals
    - A clear legend (placed below the plot)
    - an appropriate colour palette

- Avoid using pie-charts to compare proportions

- Avoid using barplots _(rather use boxplots and/or scatterplots)_

Types of graphical analysis
===========================
type: twocol

**For exploratory analysis**
* Getting to know your data
* Rough and ready
```{r rough, fig.height = 6, fig.width = 6, fig.align = 'center'}
par(cex = 1.5, cex.axis = 1.1)
age <- rnorm(100, mean = 30, sd = 10)
data_1 <- data.frame(age = age,
                     activity = ((jitter(age, amount = 20)) * -1) + 100)
with(data_1, plot(age, activity))
```

****

**For reporting**
* Presenting your data to others
* Tells a standalone story
* Polished
```{r polished, fig.height = 4.5, fig.width = 5.5, fig.align = 'center'}
ggplot2::ggplot(data_1, aes(x = age, y = activity)) +
    geom_smooth(colour = 'gray40', size = 1) +
    geom_point(colour = 'blue', fill = 'blue', alpha = 0.5, size = 3) +
    labs(x = '\nAge (years)', y = 'Median daily activity (counts)\n') +
    theme(panel.background = element_blank(),
          panel.grid.major = element_line(colour = 'gray90',
                                          size  = 0.8),
          axis.ticks = element_blank(),
          axis.text = element_text(size = 16),
          axis.title = element_text(size = 16))
```

Base graphics
=============
title: hide
type: aside

Base _R_ graphics

Base graphics
==============
class: vcenter

The _graphics_ and _grDevices_ packages are included in the base installation of _R_.

These packages add quite powerful graphing functions to base _R_.

**Graphing process in base R**
- Initalize a new plot
- Add to the new plot

Initializing a plot
===================
class: centre

Common plotting function calls
```{r eval = FALSE, echo = TRUE}
# Scatter plots
plot(x, y, ...)

# Boxplots
boxplot(x, ...)

# Histograms
hist(x, ...)

# Bar charts
barplot(height, ...)

# Mosaic plots
mosaicplot(x, ...)
```

Examples
========
type: hcenter

**Scatter plots**
```{r scatter_plot, echo = 7, fig.align = 'center', fig.width = 4.8, fig.height = 4.5}

# Figure options
par(mar = c(4,4,1,1))
par(cex.axis = 1.2)
par(cex.lab = 1.2)

plot(x = airquality$Ozone,
     y = airquality$Temp)
```

Examples
========
**Boxplots**
```{r boxplot, echo = 7, fig.align = 'center', fig.width = 5, fig.height = 5}

# Figure options
par(mar = c(4,4,1,1))
par(cex.axis = 1.2)
par(cex.lab = 1.2)

boxplot(airquality$Ozone ~ airquality$Month)
```

Examples
========
**Histograms**
```{r histogram, echo = 7, fig.align = 'center', fig.width = 6, fig.height = 4.8}

# Figure options
par(mar = c(4,4,1,1))
par(cex.axis = 1.2)
par(cex.lab = 1.2)

hist(airquality$Ozone)
```

Examples
========
**Bar charts**
```{r bar_chart, echo = 7:8, fig.align = 'center', fig.width = 5, fig.height = 5}

# Figure options
par(mar = c(4,4,1,1))
par(cex.axis = 1.2)
par(cex.lab = 1.2)

foo <- table(mtcars$cyl)
barplot(foo)
```

Examples
========
**Mosaic plots**
```{r mosaic_plot, echo = 7:8, fig.align = 'center', fig.width = 5, fig.height = 5}

# Figure options
par(mar = c(4,4,1,1))
par(cex.axis = 1.2)
par(cex.lab = 1.2)

bar <- xtabs(~ mtcars$cyl + mtcars$am)
mosaicplot(bar)
```

Improving your plot
===================
**Key plot parameters to tweak the main features of the plot**<br>
_(find more parameters with `?par`)_

- **pch:** plotting symbol (default is open circle);
- **lty:** line type (default is solid line);
- **lwd:** line width;
- **col:** plotting color;
- **main:** overall title for the plot;
- **xlab:** title for the x-axis label;
- **ylab:** title for the y-axis label;
- **xlim, ylim:** set the axis limits.

Examples
========
type: twocol

```{r scatter_prettify_1, echo = TRUE, eval = FALSE}

plot(x = airquality$Ozone,
     y = airquality$Temp,
     xlab = 'Ozone',       # x-axis label
     ylab = 'Temperature', # y-axis label
     pch = 24,             # open triangles
     col = 'blue',         # colour
     xlim = c(0, 200),     # x-axis limits
     ylim = c(50, 100))    # y-axis limits
```


```{r scatter_prettify_2, echo = FALSE, fig.width = 3.5, fig.height = 3.2, fig.align = 'center'}

# Figure options
par(mar = c(4,4,1,1))
par(cex.axis = 1.2)
par(cex.lab = 1.2)

plot(x = airquality$Ozone,
     y = airquality$Temp,
     xlab = 'Ozone', ylab = 'Temperature',
     pch = 24, col = 'blue',
     xlim = c(0, 200), ylim = c(50, 100))
```

Adding to your plot
===================
type: twocol

Once you have the plot, you can add to it.

**For example, first the main plot**

    plot(x, y, ...)

**...and then add**

    abline()
    lines()
    points()
    text()

****

```{r fancify}
# Figure options
par(mar = c(4,5,1,1))
par(cex.axis = 1.7)
par(cex.lab = 1.7)

plot(x = airquality$Ozone,
         y = airquality$Temp,
         xlab = 'Ozone', ylab = 'Temperature',
         pch = 24, col = 'blue',
         xlim = c(0, 200), ylim = c(50, 100))
```

Adding to your plot
===================
type: twocol

**Add an abline**
```{r ablines, echo = TRUE, eval = FALSE}

plot(...)

# Add
## Vertical line
abline(v = 100)

## Horizontal line
abline(h = 70)

## Regression line
fit <- lm(airquality$Ozone ~ airquality$Temp)

abline(fit)
```

****

```{r ablines_2}
# Figure options
par(mar = c(4,5,1,1))
par(cex.axis = 1.7)
par(cex.lab = 1.7)

plot(x = airquality$Ozone,
         y = airquality$Temp,
         xlab = 'Ozone', ylab = 'Temperature',
         pch = 24, col = 'blue',
         xlim = c(0, 200), ylim = c(50, 100))

# Add
## Vertical line
abline(v = 100)

## Horizontal line
abline(h = 70)

## Regression line
fit <- lm(airquality$Ozone ~ airquality$Temp)

abline(fit)
```

Adding to your plot
===================
type: twocol

**Add lines**
```{r lowess, echo = TRUE, eval = FALSE}

plot(...)

# Add
## Lowess smoother
sm_fit <- lowess(airquality$Ozone,
                 airquality$Temp,
                 delta = 200*0.01)

lines(sm_fit)
```

****

```{r lowess_2}
# Figure options
par(mar = c(4,5,1,1))
par(cex.axis = 1.7)
par(cex.lab = 1.7)

plot(x = airquality$Ozone,
         y = airquality$Temp,
         xlab = 'Ozone', ylab = 'Temperature',
         pch = 24, col = 'blue',
         xlim = c(0, 200), ylim = c(50, 100))

# Add
## Lowess smoother
sm_fit <- lowess(airquality$Ozone,
                 airquality$Temp,
                 delta = 200*0.01)

lines(sm_fit)
```

Adding to your plot
===================
type: twocol

**Add points**
```{r points, echo = TRUE, eval = FALSE}

plot(...)

# Add
## points
points(x = 190,
       y = 55,
       cex = 3,
       pch = 19)
```

****

```{r points_2}
# Figure options
par(mar = c(4,5,1,1))
par(cex.axis = 1.7)
par(cex.lab = 1.7)

plot(x = airquality$Ozone,
         y = airquality$Temp,
         xlab = 'Ozone', ylab = 'Temperature',
         pch = 24, col = 'blue',
         xlim = c(0, 200), ylim = c(50, 100))

# Add
## points
points(x = 190,
       y = 55,
       cex = 3,
       pch = 19)
```

Adding to your plot
===================
type: twocol

**Add text**
```{r text, echo = TRUE, eval = FALSE}

plot(...)

# Add
## text
text(x = 160, y = 90,
     'lowess')
text(x = 160, y = 72,
     'horizontal')
text(x = 106, y = 57,
     'vertical')
text(x = 80, y = 60,
     'regression')
text(x = 190, y = 62,
     'point')
```

****

```{r text_2}
# Figure options
par(mar = c(4,5,1,1))
par(cex.axis = 1.7)
par(cex.lab = 1.7)

plot(x = airquality$Ozone,
         y = airquality$Temp,
         xlab = 'Ozone', ylab = 'Temperature',
         pch = 24, col = 'blue',
         xlim = c(0, 200), ylim = c(50, 100))

# Add
## Vertical line
abline(v = 100)

## Horizontal line
abline(h = 70)

## Regression line
fit <- lm(airquality$Ozone ~ airquality$Temp)
abline(fit)

## Lowess smoother
sm_fit <- lowess(airquality$Ozone,
                 airquality$Temp,
                 delta = 200*0.01)
lines(sm_fit)

## points
points(x = 190,
       y = 55,
       cex = 3,
       pch = 19)

## text
text(x = 160, y = 90,
     'lowess', cex = 1.5)
text(x = 160, y = 72,
     'horizontal', cex = 1.5)
text(x = 120, y = 57,
     'vertical', cex = 1.5)
text(x = 60, y = 60,
     'regression', cex = 1.5)
text(x = 190, y = 52,
     'point', cex = 1.5)
```

Saving your plot
================
Open a graphics device before starting the plot

    png('foo_chart.png')

    # Remember to give the file a name
    # The default path is the working directory
    # Many options [e.g., bmp(), jpeg(), pdf()]

Plot your figure

    plot(x = foo$x, y = foo$y)

And the close the graphics device at the end (**Important**)

    dev.off()

Example
=======
class: vcenter

```{r device, echo = TRUE, eval = FALSE}
# Open the graphics device
pdf('foo.pdf', paper = 'a4r')
    # 'a4' = portrait (default)
    # 'a4r' = landscape

# Plot the figure
plot(x = airquality$Ozone, y = airquality$Temp,
     main = 'Look, blue traingles',
     xlab = 'Ozone', ylab = 'Temperature',
     pch = 24, col = 'blue',
     xlim = c(0, 200), ylim = c(50, 100))

# Close the graphics device
dev.off()
```

ggplot2
=======
title: hide
type: aside

Basic concepts:<br>
The grammer of graphics and _ggplot2_

The grammer of graphics
=======================

- Grammer gives language rules.

- Language consists of _words_, and _grammer_ provides the framework under which words can be combined and expressed (_statements_), thus setting the scope of the language.

- Leland Wilkinson published the _'Grammer of Graphics'_ in 1999.

- He conceptualized a grammer for graphics, that would move graphics passed mere chart types _(words)_ like pie-chart, bar-chart, etc.

- By providing a grammer for graphics, he hoped to provide the framework to build an unlimited array of graphic forms _(statements)_.

ggplot2: the grammer of graphics in R
====================================

<div class="center", style="width:90%;">
    <p style="font-size:130%;font-style:italic;text-align:center;margin-top:60px;">
    "In brief, the grammar tells us that a statistical graphic is a mapping from data to <span style="font-weight:bold">aesthetic attributes</span> (colour, shape, size) of <span style="font-weight:bold">geometric objects</span> (points, lines, bars). The plot may also contain statistical transformations of the data and is drawn on a specific <span style="font-weight:bold">coordinate system</span>."
    </p>
    <p style="text-align:center">
     Hadley Wickham<br>
        <span style="font-style:italic;font-size:80%;">(ggplot2: Elegant Graphics for Data Analysis (Use R!))</span>
    </p>
</div>

ggplot2
=======
class: vcenter

**Basic Components of a _ggplot2_ plot:**
- Data _(in a dataframe)_
- Aesthetics _(how data are mapped to color, size, etc)_
- Geoms _(geometric objects like points, lines, shapes)_
- Coordinate system

ggplot2
=======
Data and co-ordinatre system
<img class="center" style="z-index:-1" src="./resources/ggplot-0.svg">

<div class="footer" style="font-size:80%">
     Garret Grolemund.<a href="//cdn.oreillystatic.com/en/assets/1/event/120/ggvis_%20Interactive,%20intuitive%20graphics%20in%20R%20Presentation.pdf">
   ggvis: Interactive, intuitive graphics in R</a>, 2014
</div>

ggplot2
=======
Mapping data to a geom
<img class="center" style="z-index:-1" src="./resources/ggplot-1.svg">

<div class="footer" style="font-size:80%">
     Garret Grolemund.<a href="//cdn.oreillystatic.com/en/assets/1/event/120/ggvis_%20Interactive,%20intuitive%20graphics%20in%20R%20Presentation.pdf">
   ggvis: Interactive, intuitive graphics in R</a>, 2014
</div>

ggplot2
=======
Mapping data to an aesthetic (colour)
<img class="center" style="z-index:-1" src="./resources/ggplot-2.svg">

<div class="footer" style="font-size:80%">
     Garret Grolemund.<a href="//cdn.oreillystatic.com/en/assets/1/event/120/ggvis_%20Interactive,%20intuitive%20graphics%20in%20R%20Presentation.pdf">
   ggvis: Interactive, intuitive graphics in R</a>, 2014
</div>

ggplot2
=======
Mapping data to an aesthetic (shape)
<img class="center" style="z-index:-1" src="./resources/ggplot-3.svg">

<div class="footer" style="font-size:80%">
     Garret Grolemund.<a href="//cdn.oreillystatic.com/en/assets/1/event/120/ggvis_%20Interactive,%20intuitive%20graphics%20in%20R%20Presentation.pdf">
   ggvis: Interactive, intuitive graphics in R</a>, 2014
</div>

ggplot2
=======
Mapping data onto the co-ordinate system
<img class="center" style="z-index:-1" src="./resources/ggplot-4.svg">

<div class="footer" style="font-size:80%">
     Garret Grolemund.<a href="//cdn.oreillystatic.com/en/assets/1/event/120/ggvis_%20Interactive,%20intuitive%20graphics%20in%20R%20Presentation.pdf">
   ggvis: Interactive, intuitive graphics in R</a>, 2014
</div>

Assignment
==========
type: tutorial
class: vcenter

Get hands-on practice with _base R graphics_ and _ggplot2_ by completing (at least) sections 5, 7, 8, 9, and 10 of the _swirl_ package course: _'Exploratory Data Analysis'_.

```{r, echo = TRUE, eval = FALSE}
# If you need to download the course
library(swirl)
install_from_swirl('Exploratory Data Analysis')
swirl()

# Otherwise
library(swirl)
swirl()
```

Web resources
=============
class: vcenter

_**Base graphics**_
- Quick-R: [basic graphics](http://www.statmethods.net/graphs/index.html), by Robert Kabacoff.
- Quick-R: [advanced graphics](http://www.statmethods.net/graphs/index.html), by Robert Kabacoff.

_**ggplot2**_
- [Cookbook for R - Graphs](http://www.cookbook-r.com/Graphs/), by Winston Chang.

- [Documentation](http://docs.ggplot2.org/current/index.html) documentation, by Hadley Wickham and Winston Chang.

- [Cheatsheet](https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf), by RStudio.


tl;dr
===================================

<div class="center", style="width:80%;">
    <p style="font-size:150%;font-style:italic;text-align:center;margin-top:60px;">
    "Above all else show the data."
    </p>
    <p style="text-align:center">
     Edward Tufte<br>
        <span style="font-style:italic;font-size:80%;">(Author of:'The Visual Display of Quantitative Information'<br>and 'Beautiful Evidence')</span>
    </p>
</div>
